
. .\CI_Utils.ps1  | out-null

$dbgLevel = 5
$logfile = ".\prepareImageForCloudinit.log"

function LogMsg([int]$level, [string]$msg, [string]$colorFlag)
{
    <#
    .Synopsis
        Write a message to the log file and the console.
    .Description
        Add a time stamp and write the message to the test log.  In
        addition, write the message to the console.  Color code the
        text based on the level of the message.
    .Parameter level
        Debug level of the message
    .Parameter msg
        The message to be logged
    .Example
        LogMsg 3 "Info: This is a test"
    #>

    if ($level -le $dbgLevel)
    {
        $now = [Datetime]::Now.ToString("MM/dd/yyyy HH:mm:ss : ")
        ($now + $msg) | out-file -encoding ASCII -append -filePath $logfile
        
        $color = "White"
        if ( $msg.StartsWith("Error"))
        {
            $color = "Red"
        }
        elseif ($msg.StartsWith("Warn"))
        {
            $color = "Yellow"
        }
        else
        {
            $color = "Gray"
        }

		#Print info in specified color
		if( $colorFlag )
		{
			$color = $colorFlag
		}
        
        write-host -f $color "$msg"
    }
}


Function CIUpdateConfig([string]$originalConfigFile, [string]$CIFolder, [string]$newConfigFileName, [string]$VMName)
{
	<#
	Usage:
		CIUpdateConfig $originalConfigFile $CIFolder $newConfigFileName
	Description:
		This is a function to update cloud configuration for CI job.
	#>
	
	$newConfigFile = "$CIFolder\$newConfigFileName"
    
    # The $newConfigFileName is a copy of $originalConfigFile. All changes will be written into the $newConfigFileName
    Copy-Item $originalConfigFile $newConfigFile
    
	[xml]$xml = Get-Content "$newConfigFile"
	
	# Update vmName
	$xml.config.VMs.vm.vmName = $VMName
	
	# Update test hvServer
	$server = "localhost"
	$xml.config.VMs.vm.hvServer = $server
	
	# Update ipv4 address
	$ipv4_addr = GetIPv4 $VMName $server
    if( $ipv4_addr -eq 1 )
    {
        "Error: Cannot get IPv4 via KVP."
        return 1
    }
	$xml.config.VMs.vm.ipv4 = [string]$ipv4_addr

	$xml.Save("$newConfigFile")
    
    return 0
}

Function CreateVM([String] $vmName, [String] $vhdPath, [String] $switchName, [String] $hvServer = "localhost")
{
	$status = Get-VM  $vmName  -ComputerName $hvServer  2>null
	if( $status -ne $null )
	{
		LogMsg 0 "Warning: The $vhdName vm already exists, so delete it and create a new one."
		Remove-VM -Name   $vmName -Force
	}
	
	LogMsg 3 "Info: To create VM $vmName"
    New-VM –Name $vmName –MemoryStartupBytes 512MB –VHDPath $vhdPath -SwitchName $switchName -ComputerName $hvServer | out-null
	if ($? -eq "True")
	{
		LogMsg 3 "Info: Create VM $vmName successfully"
		return 0
	}
	else
	{
		LogMsg 0 "Error: Create VM $vmName failed"
		return 1
	}
}



<#
$xml: xml file path
$scriptFile: The file will be executed on VM
$remoteDir: This directory on VM is stored the files from the local
$toolsParentDir: This directory on local is the parent directory of tools subdirectory
$scriptFilePara: The parameters for script file 
$logFileOnVM: The log name generated by the script on VM
$logFileDirOnLocal: This directory is stored the log copied from VM 
$timeout: The script file must be done in this time

Example:
$remoteDir = "/tmp"
$logFile = "autobuild.log"
ExecuteScriptFromLocalToVmAndCheckResult  "$pwd\BIS\$os_on_host\lisa\run.xml" "./CI/autobuildtest.sh" $remoteDir  "CI" "  --log $remoteDir/$logFile " "$remoteDir/$logFile"  $pwd  "3600"

#>
Function ExecuteScriptFromLocalToVmAndCheckResult ( [String]$xml,[String]$scriptFile,[String]$remoteDir,[String]$toolsParentDir,[String]$scriptFilePara,[String]$logFileOnVM,[String]$logFileDirOnLocal,[String]$timeout)
{

	$xmlFilenameForVM = [xml] (Get-Content -Path  $xml)  2>null
	$vm = $xmlFilenameForVM.config.VMs.vm

	cd .\$toolsParentDir
	WaitSSHLoginPrepare $vm.sshKey  $vm.ipv4 
	cd ..
	
	#Send the script from local to VM
	$sts = SendFileToVMUntilTimeout  $vm $scriptFile $remoteDir $toolsParentDir 
	if( $sts -ne 0 )
	{
		Write-Error  "Error: $($vm.vmName) send $scriptFile to $($vm.vmName) failed"
		return 1
	}
	Write-Output "Log: $($vm.vmName) send $scriptFile to $($vm.vmName) successfully"

	#Send command from local host to VM 
	#Make sure the format of script on VM is unix 
	$fileName = [io.path]::GetFileName("$scriptFile")
	$FreeBSDFileName = "$remoteDir/$fileName"
	Write-Output "Info: To set the format of script $FreeBSDFileName on $($vm.vmName) being unix"
	if (-not (SendCommandToVMUntilTimeout $vm "dos2unix  $FreeBSDFileName" $toolsParentDir "120") )
	{
		Write-Error "Error: Unable to set the format of script $FreeBSDFileName on $($vm.vmName) being unix"
		return 1
	}
	Write-Output "Log: Set the format of script $FreeBSDFileName on $($vm.vmName) being unix successfully"

	#To set x bit of the script on VM
	Write-Output  "Info: To set x bit of the script $FreeBSDFileName on $($vm.vmName)"
	if (-not (SendCommandToVMUntilTimeout $vm "chmod 755 $FreeBSDFileName"  $toolsParentDir "120") )
	{
		Write-Error "Error: $($vm.vmName) unable to set x bit on test $FreeBSDFileName script"
		return 1
	}


	#Send command to run script on VM 
	#Note: This script will reboot the VM !!!
	Write-Output "Info: To run the script $FreeBSDFileName on $($vm.vmName) for install cloudinit"
	if (-not (SendCommandToVMUntilTimeout $vm "$FreeBSDFileName  $scriptFilePara"  $toolsParentDir $timeout) )
	{
		Write-Error  "Error: $($vm.vmName) unable to run $FreeBSDFileName script"
		return 1
	} 

	#Get log file from VM to local host		
	Write-Output  "Info: Get log file $logFileOnVM from VM to local host"
	$sts = GetFileFromVMUntilTimeout  $vm $logFileOnVM $logFileDirOnLocal  $toolsParentDir   
	if( $sts -ne 0 )
	{
		Write-Error "Error: $($vm.vmName) get $logFileOnVM from $($vm.vmName) failed"
		return 1
	}
	
	$name = [io.path]::GetFileName("$logFileOnVM")
	$sts = CheckErrorLogInFile "$logFileDirOnLocal\$name"
	if( $sts -ne 0 )
	{
		Write-Error "Error: There is some errors in $logFileDirOnLocal\$name"
		return 1
	}

	return 0

}





$vhdName = "CloudinitBase.vhd"
$baseVHD = "C:\Users\v-hoxian\Downloads\FreeBSD-12.0-CURRENT-amd64\" + $vhdName


$status = Test-Path $baseVHD  
if( $status -ne "True" )
{
	"Error: The base vhd $baseVHD doesn't exist!"
	return 1
}

$currentPath = Resolve-Path .

"Copy $baseVHD to $currentPath."
Copy-Item $baseVHD $currentPath  


$vmName = "xhxImageForCloudinit"
$vhdPath = [string]$currentPath + "\" + [string]$vhdName
$switchName = "External"
$hvServer = "localhost"


"VM Name: $vmName"
"VHD Path: $vhdPath"
"Switch Name: $switchName"

"Create a VM with $currentPath\$vhdName"
CreateVM  $vmName $vhdPath $switchName  

LogMsg 3 "Info: To start $vmName"
$sts = DoStartVM $vmName $hvServer
if($sts[-1] -ne 0)
{
	LogMsg 0 "Error: Start VM $vmName failed"
	return 1
}


$XmlConfigFile = "vmconfiguration.xml"
$sts = CIUpdateConfig "$pwd\$XmlConfigFile" "$pwd\" run.xml $vmName
if( $sts[-1] -ne 0 )
{
	"Failed to prepare the $pwd\BIS\$os_on_host\lisa\run.xml and abort the test."
	return 1
}

$ciCodeDir = "CI"
$remoteDir = "/usr"
$logFile = "autobuild.log"
$sts=ExecuteScriptFromLocalToVmAndCheckResult  ".\run.xml" ".\$ciCodeDir\autobuild.sh" $remoteDir  $ciCodeDir "  --log $remoteDir/$logFile " "$remoteDir/$logFile"  $pwd  "108000"
if($sts[-1] -ne 0)
{
	"Error: failed to install cloudinit"
	return 1
}

LogMsg 3 "Info: To stop $vmName"
Stop-VM -Name $vmName -ComputerName $hvServer  -Force 2>null
sleep 30


"Done"

